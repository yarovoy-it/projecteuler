package com.is.projecteuler.fibonacci;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * <p>
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * <p>
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */
public class Fibonacci {

    /**
     * Counting the Fibonacci sum of the even-value long.
     *
     * @param untilNumber sequence whose values do not exceed
     * @return sum of even fibonacci number. long
     */
    public static long sumOfFibonacciEvenValue(long untilNumber) {
        if (untilNumber < 0) {
            throw new IllegalArgumentException("We can not count sum less then " + untilNumber + " try more then 0");
        }
        long firstFibNum = 1;
        long secondFibNum = 0;
        long nextFibNum = 0;
        long evenSumFib = 0;
        while (untilNumber > nextFibNum) {
            nextFibNum = firstFibNum + secondFibNum;
            if (isEven(nextFibNum)) {
                evenSumFib += nextFibNum;
            }
            firstFibNum = secondFibNum;
            secondFibNum = nextFibNum;
        }
        return evenSumFib;
    }

    /**
     * Check number is even or not
     *
     * @param number for check
     * @return even or not the boolean
     */
    private static boolean isEven(long number) {
        return number % 2 == 0;
    }


}
