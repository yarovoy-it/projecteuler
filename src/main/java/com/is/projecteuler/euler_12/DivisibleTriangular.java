package com.is.projecteuler.euler_12;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * <p>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * <p>
 * Let us list the factors of the first seven triangle numbers:
 * <p>
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * <p>
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class DivisibleTriangular {

    public static int findValueFirstTriangleNumber(int countDividers) {
        int triangleNumber = 0;
        for (int naturalNumber = 1; ; naturalNumber++) {
            triangleNumber += naturalNumber;
            if (getCountNumberDividers(triangleNumber) > countDividers) {
                return triangleNumber;
            }
        }
    }

    public static int getCountNumberDividers(int number) {
        int countDividers = 0;
        int end = (int) Math.sqrt(number);
        for (int divider = 1; divider < end; divider++) {
            if (number % divider == 0) {
                countDividers += 2;
            }
        }
        return countDividers;
    }

    private static int triangleNumbers(int n) {
        if (n == 1)
            return 1;
        else
            return (n + triangleNumbers(n - 1));
    }

}
